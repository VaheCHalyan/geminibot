import os
import logging
import requests
import base64
import json
import io
from datetime import datetime
import telebot
from telebot import types
import mimetypes
import threading
import http.server
import socketserver
import time
import signal
import sys

# –£–ª—É—á—à–µ–Ω–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
class KeepAliveHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        
        status_page = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Gemini Telegram Bot - Status</title>
            <meta charset="UTF-8">
            <meta http-equiv="refresh" content="30">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; background: #f0f2f5; }}
                .container {{ max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .status {{ color: #28a745; font-size: 18px; font-weight: bold; }}
                .time {{ color: #6c757d; }}
                h1 {{ color: #495057; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ Gemini Telegram Bot</h1>
                <div class="status">‚úÖ Bot Status: ACTIVE</div>
                <p>üïê Current Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
                <p>üîÑ Auto-refresh every 30 seconds</p>
                <p>üìä Server running on port: {os.environ.get('PORT', '10000')}</p>
                <hr>
                <p><strong>Available Commands:</strong></p>
                <ul>
                    <li>/start - Start the bot</li>
                    <li>/help - Get help</li>
                    <li>/status - Check bot status</li>
                    <li>/clear - Clear chat history</li>
                </ul>
            </div>
        </body>
        </html>
        """
        self.wfile.write(status_page.encode('utf-8'))
    
    def log_message(self, format, *args):
        # –ü–æ–¥–∞–≤–ª—è–µ–º –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        pass

def run_keep_alive_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    port = int(os.environ.get("PORT", 10000))
    max_retries = 5
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            with socketserver.TCPServer(("", port), KeepAliveHandler) as httpd:
                logging.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                httpd.serve_forever()
                break
        except OSError as e:
            retry_count += 1
            if "Address already in use" in str(e):
                port += 1
                logging.warning(f"–ü–æ—Ä—Ç {port-1} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É—é –ø–æ—Ä—Ç {port}")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
                time.sleep(5)
            
            if retry_count >= max_retries:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTP —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
                break

# –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
server_thread = threading.Thread(target=run_keep_alive_server, daemon=True)
server_thread.start()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è heartbeat
def heartbeat():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ heartbeat —Å–∏–≥–Ω–∞–ª–æ–≤"""
    counter = 0
    while True:
        try:
            counter += 1
            logging.info(f"üíì Heartbeat #{counter} - Bot alive")
            time.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ heartbeat: {e}")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫ heartbeat –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
heartbeat_thread = threading.Thread(target=heartbeat, daemon=True)
heartbeat_thread.start()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN') or "8431876453:AAHOFXEar4aIcSMAn5WdXVdNxQMAiYZfhoo"
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY') or "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"
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID') or "2145450623"

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
logger.info(f"üîç BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω: {BOT_TOKEN[:10]}...")
logger.info(f"üîç OPENROUTER_API_KEY –∑–∞–≥—Ä—É–∂–µ–Ω: {OPENROUTER_API_KEY[:15]}...")
logger.info(f"üîç ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

if not OPENROUTER_API_KEY:
    logger.error("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenRouter
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL_NAME = "google/gemini-2.5-flash"

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
SUPPORTED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp']
SUPPORTED_DOCUMENT_TYPES = [
    'text/plain', 'application/pdf', 'application/json',
    'text/csv', 'application/msword', 'text/html'
]

class GeminiBot:
    def __init__(self):
        self.user_contexts = {}
        self.max_context_length = 10
        
    def get_user_context(self, user_id):
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = []
        return self.user_contexts[user_id]
    
    def add_to_context(self, user_id, role, content):
        context = self.get_user_context(user_id)
        context.append({"role": role, "content": content})
        
        if len(context) > self.max_context_length * 2:
            context.pop(0)
    
    def clear_context(self, user_id):
        if user_id in self.user_contexts:
            self.user_contexts[user_id] = []
    
    def encode_file_to_base64(self, file_content, mime_type):
        try:
            encoded_content = base64.b64encode(file_content).decode('utf-8')
            return f"data:{mime_type};base64,{encoded_content}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def prepare_message_content(self, text=None, file_data=None, mime_type=None):
        content = []
        
        if text:
            content.append({"type": "text", "text": text})
        
        if file_data and mime_type:
            if mime_type.startswith('image/'):
                encoded_file = self.encode_file_to_base64(file_data, mime_type)
                if encoded_file:
                    content.append({
                        "type": "image_url",
                        "image_url": {"url": encoded_file}
                    })
            else:
                try:
                    if mime_type == 'application/pdf':
                        text_content = f"[PDF —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_data)} –±–∞–π—Ç]"
                    else:
                        text_content = file_data.decode('utf-8', errors='ignore')
                    
                    content.append({
                        "type": "text", 
                        "text": f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ({mime_type}):\n\n{text_content[:4000]}..."
                    })
                except Exception as e:
                    content.append({
                        "type": "text",
                        "text": f"[–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {str(e)}]"
                    })
        
        return content if content else [{"type": "text", "text": text or "–ü—Ä–∏–≤–µ—Ç!"}]
    
    def call_gemini_api(self, user_id, text=None, file_data=None, mime_type=None):
        try:
            context = self.get_user_context(user_id)
            message_content = self.prepare_message_content(text, file_data, mime_type)
            
            messages = context.copy()
            messages.append({"role": "user", "content": message_content})
            
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "X-Title": "Telegram Gemini Bot",
                "HTTP-Referer": "https://github.com/your-repo",
            }
            
            payload = {
                "model": MODEL_NAME,
                "messages": messages,
                "max_tokens": 4000,
                "temperature": 0.7,
                "stream": False
            }
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Gemini –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            response = requests.post(
                OPENROUTER_API_URL,
                headers=headers,
                json=payload,
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                ai_response = result['choices'][0]['message']['content']
                
                self.add_to_context(user_id, "user", message_content)
                self.add_to_context(user_id, "assistant", ai_response)
                
                return ai_response
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API OpenRouter: {response.status_code} - {response.text}")
                return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}\n{response.text}"
                
        except requests.exceptions.Timeout:
            return "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        except requests.exceptions.ConnectionError:
            return "üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API: {e}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
gemini_bot = GeminiBot()

def signal_handler(signum, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    try:
        bot.stop_polling()
    except:
        pass
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def log_message(message):
    user = message.from_user
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} ({user.id}): {message.content_type}")

@bot.message_handler(commands=['start'])
def start_handler(message):
    log_message(message)
    
    welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini 2.0-flash Bot!**

–Ø –º–æ–≥—É:
‚Ä¢ üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
‚Ä¢ üìÑ –†–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏ (PDF, TXT, JSON –∏ –¥—Ä.)
‚Ä¢ üß† –í–µ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
/help - –ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª! üöÄ
    """
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üìö –ü–æ–º–æ—â—å", callback_data="help"),
        types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear")
    )
    
    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(commands=['clear'])
def clear_handler(message):
    log_message(message)
    user_id = message.from_user.id
    gemini_bot.clear_context(user_id)
    bot.send_message(message.chat.id, "üßπ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞!")

@bot.message_handler(commands=['help'])
def help_handler(message):
    log_message(message)
    help_text = """
üìö **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**

**üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –í–µ–¥–∏—Ç–µ –¥–∏–∞–ª–æ–≥ (–±–æ—Ç –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç)

**üñºÔ∏è –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ + –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–º
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

**üìÑ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:**
‚Ä¢ PDF, TXT, JSON, CSV –∏ –¥—Ä—É–≥–∏–µ
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤

**–ö–æ–º–∞–Ω–¥—ã:**
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
    """
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

@bot.message_handler(commands=['status'])
def status_handler(message):
    log_message(message)
    try:
        test_response = gemini_bot.call_gemini_api(message.from_user.id, "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ: —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?")
        status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**

‚úÖ Telegram Bot: –†–∞–±–æ—Ç–∞–µ—Ç  
‚úÖ OpenRouter API: –†–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Gemini 2.0-flash: –î–æ—Å—Ç—É–ø–µ–Ω

üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {len(gemini_bot.get_user_context(message.from_user.id))} —Å–æ–æ–±—â–µ–Ω–∏–π

**–¢–µ—Å—Ç API:** {test_response[:100]}...
        """
        bot.send_message(message.chat.id, status_text, parse_mode='Markdown')
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "help":
        help_handler(call.message)
    elif call.data == "clear":
        user_id = call.from_user.id
        gemini_bot.clear_context(user_id)
        bot.answer_callback_query(call.id, "üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
        bot.edit_message_text(
            "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.",
            call.message.chat.id,
            call.message.message_id
        )

@bot.message_handler(content_types=['photo'])
def photo_handler(message):
    try:
        log_message(message)
        bot.send_chat_action(message.chat.id, 'typing')
        
        file_info = bot.get_file(message.photo[-1].file_id)
        file_data = bot.download_file(file_info.file_path)
        caption = message.caption or "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ? –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ."
        mime_type = 'image/jpeg'
        
        response = gemini_bot.call_gemini_api(message.from_user.id, caption, file_data, mime_type)
        
        if len(response) > 4096:
            for i in range(0, len(response), 4096):
                bot.send_message(message.chat.id, response[i:i+4096])
        else:
            bot.send_message(message.chat.id, response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

@bot.message_handler(content_types=['document'])
def document_handler(message):
    try:
        log_message(message)
        bot.send_chat_action(message.chat.id, 'typing')
        
        file_info = bot.get_file(message.document.file_id)
        
        if file_info.file_size > 20 * 1024 * 1024:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 20MB.")
            return
        
        mime_type = message.document.mime_type or mimetypes.guess_type(message.document.file_name)[0]
        
        if not mime_type:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞.")
            return
        
        if mime_type not in SUPPORTED_DOCUMENT_TYPES and not mime_type.startswith('text/'):
            bot.send_message(message.chat.id, f"‚ùå –¢–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        
        file_data = bot.download_file(file_info.file_path)
        caption = message.caption or f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∞–π–ª {message.document.file_name}"
        
        response = gemini_bot.call_gemini_api(message.from_user.id, caption, file_data, mime_type)
        
        if len(response) > 4096:
            for i in range(0, len(response), 4096):
                bot.send_message(message.chat.id, response[i:i+4096])
        else:
            bot.send_message(message.chat.id, response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@bot.message_handler(content_types=['voice'])
def voice_handler(message):
    log_message(message)
    bot.send_message(message.chat.id, "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")

@bot.message_handler(func=lambda message: True)
def text_handler(message):
    try:
        log_message(message)
        bot.send_chat_action(message.chat.id, 'typing')
        
        response = gemini_bot.call_gemini_api(message.from_user.id, message.text)
        
        if len(response) > 4096:
            for i in range(0, len(response), 4096):
                bot.send_message(message.chat.id, response[i:i+4096])
        else:
            bot.send_message(message.chat.id, response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def send_startup_notification():
    if ADMIN_CHAT_ID:
        try:
            startup_message = f"""
üöÄ **Gemini Bot –∑–∞–ø—É—â–µ–Ω!**

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
ü§ñ –ú–æ–¥–µ–ª—å: {MODEL_NAME}
‚òÅÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Render.com
‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
            """
            bot.send_message(ADMIN_CHAT_ID, startup_message, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

def main():
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Gemini Telegram Bot...")
    logger.info(f"üîó –ú–æ–¥–µ–ª—å: {MODEL_NAME}")
    logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {os.environ.get('PORT', '10000')}")
    
    send_startup_notification()
    
    restart_count = 0
    max_restarts = 50
    
    while restart_count <= max_restarts:
        try:
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ #{restart_count + 1}")
            bot.polling(none_stop=True, interval=2, timeout=60, skip_pending=True)
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
            break
            
        except Exception as e:
            restart_count += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {restart_count}): {e}")
            
            if restart_count > max_restarts:
                logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤")
                break
                
            wait_time = min(restart_count * 5, 60)
            logger.info(f"‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
            time.sleep(wait_time)
            
            try:
                if ADMIN_CHAT_ID and restart_count % 10 == 0:
                    bot.send_message(ADMIN_CHAT_ID, f"‚ö†Ô∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω {restart_count} —Ä–∞–∑")
            except:
                pass
                
    logger.info("üõë –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        try:
            if ADMIN_CHAT_ID:
                bot.send_message(ADMIN_CHAT_ID, f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {str(e)}")
        except:
            pass
        raise